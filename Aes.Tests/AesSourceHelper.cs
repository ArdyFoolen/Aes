using Aes.AF;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Security.Cryptography;
using System.Text;
using System.Threading.Tasks;

namespace Aes.Tests
{
    public static class AesSourceHelper
    {
        #region EncryptDecrypt

        public static byte[][] Keys = new byte[3][]
        {
            new byte[] { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f },
            new byte[] { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17 },
            new byte[] { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f }
        };

        public static IEnumerable<(byte[] In, byte[] Out, Action<Aes.AF.AesManager, Stream, Stream> Crypt)> EncryptDecrypt
        {
            get
            {
                byte[] plainBytes = new byte[] { 0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff };
                byte[] cryptBytes = new byte[] { 0x69, 0xc4, 0xe0, 0xd8, 0x6a, 0x7b, 0x04, 0x30, 0xd8, 0xcd, 0xb7, 0x80, 0x70, 0xb4, 0xc5, 0x5a };
                yield return (plainBytes, cryptBytes, (aes, outStream, inStream) => Encrypt(aes, Keys[0], AesKeySize.Aes128, PaddingMode.None, outStream, inStream));
                yield return (cryptBytes, plainBytes, (aes, outStream, inStream) => Decrypt(aes, Keys[0], AesKeySize.Aes128, PaddingMode.None, outStream, inStream));

                plainBytes = new byte[] { 0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff };
                cryptBytes = new byte[] { 0xdd, 0xa9, 0x7c, 0xa4, 0x86, 0x4c, 0xdf, 0xe0, 0x6e, 0xaf, 0x70, 0xa0, 0xec, 0x0d, 0x71, 0x91 };
                yield return (plainBytes, cryptBytes, (aes, outStream, inStream) => Encrypt(aes, Keys[1], AesKeySize.Aes192, PaddingMode.None, outStream, inStream));
                yield return (cryptBytes, plainBytes, (aes, outStream, inStream) => Decrypt(aes, Keys[1], AesKeySize.Aes192, PaddingMode.None, outStream, inStream));

                plainBytes = new byte[] { 0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff };
                cryptBytes = new byte[] { 0x8e, 0xa2, 0xb7, 0xca, 0x51, 0x67, 0x45, 0xbf, 0xea, 0xfc, 0x49, 0x90, 0x4b, 0x49, 0x60, 0x89 };
                yield return (plainBytes, cryptBytes, (aes, outStream, inStream) => Encrypt(aes, Keys[2], AesKeySize.Aes256, PaddingMode.None, outStream, inStream));
                yield return (cryptBytes, plainBytes, (aes, outStream, inStream) => Decrypt(aes, Keys[2], AesKeySize.Aes256, PaddingMode.None, outStream, inStream));
            }
        }

        public static IEnumerable<(byte[] In, byte[] Out, Action<Aes.AF.AesManager, Stream, Stream> Crypt)> EncryptDecryptDifferentPadding
        {
            get
            {
                byte[] plainBytes = new byte[] { 0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff };
                byte[] cryptBytes = new byte[] { 0x69, 0xc4, 0xe0, 0xd8, 0x6a, 0x7b, 0x04, 0x30, 0xd8, 0xcd, 0xb7, 0x80, 0x70, 0xb4, 0xc5, 0x5a,
                    0x95, 0x4f, 0x64, 0xf2, 0xe4, 0xe8, 0x6e, 0x9e, 0xee, 0x82, 0xd2, 0x02, 0x16, 0x68, 0x48, 0x99 };
                yield return (plainBytes, cryptBytes, (aes, outStream, inStream) => Encrypt(aes, Keys[0], AesKeySize.Aes128, PaddingMode.PKCS7, outStream, inStream));
                yield return (cryptBytes, plainBytes, (aes, outStream, inStream) => Decrypt(aes, Keys[0], AesKeySize.Aes128, PaddingMode.PKCS7, outStream, inStream));

                cryptBytes = new byte[] { 0x69, 0xc4, 0xe0, 0xd8, 0x6a, 0x7b, 0x04, 0x30, 0xd8, 0xcd, 0xb7, 0x80, 0x70, 0xb4, 0xc5, 0x5a,
                    0xd5, 0x65, 0xee, 0x30, 0xa4, 0x7f, 0xf4, 0x3e, 0x31, 0xf1, 0x4a, 0x71, 0xbb, 0xf8, 0xbe, 0xb7 };
                yield return (plainBytes, cryptBytes, (aes, outStream, inStream) => Encrypt(aes, Keys[0], AesKeySize.Aes128, PaddingMode.ANSIX923, outStream, inStream));
                yield return (cryptBytes, plainBytes, (aes, outStream, inStream) => Decrypt(aes, Keys[0], AesKeySize.Aes128, PaddingMode.ANSIX923, outStream, inStream));

                cryptBytes = new byte[] { 0x69, 0xc4, 0xe0, 0xd8, 0x6a, 0x7b, 0x04, 0x30, 0xd8, 0xcd, 0xb7, 0x80, 0x70, 0xb4, 0xc5, 0x5a,
                    0x43, 0x99, 0x57, 0x2c, 0xd6, 0xea, 0x53, 0x41, 0xb8, 0xd3, 0x58, 0x76, 0xa7, 0x09, 0x8a, 0xf7 };
                yield return (plainBytes, cryptBytes, (aes, outStream, inStream) => Encrypt(aes, Keys[0], AesKeySize.Aes128, PaddingMode.Zeros, outStream, inStream));
                yield return (cryptBytes, plainBytes, (aes, outStream, inStream) => Decrypt(aes, Keys[0], AesKeySize.Aes128, PaddingMode.Zeros, outStream, inStream));

                cryptBytes = new byte[] { 0x69, 0xc4, 0xe0, 0xd8, 0x6a, 0x7b, 0x04, 0x30, 0xd8, 0xcd, 0xb7, 0x80, 0x70, 0xb4, 0xc5, 0x5a,
                    0x55, 0x0e, 0xae, 0x96, 0x77, 0x19, 0x63, 0xff, 0xab, 0xfd, 0x87, 0x12, 0x8c, 0xc1, 0x1a, 0xf8 };
                yield return (plainBytes, cryptBytes, (aes, outStream, inStream) => Encrypt(aes, Keys[0], AesKeySize.Aes128, PaddingMode.ISO10126, outStream, inStream));
                yield return (cryptBytes, plainBytes, (aes, outStream, inStream) => Decrypt(aes, Keys[0], AesKeySize.Aes128, PaddingMode.ISO10126, outStream, inStream));

                plainBytes = new byte[] { 0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff };
                cryptBytes = new byte[] { 0xdd, 0xa9, 0x7c, 0xa4, 0x86, 0x4c, 0xdf, 0xe0, 0x6e, 0xaf, 0x70, 0xa0, 0xec, 0x0d, 0x71, 0x91,
                    0x3f, 0xe7, 0x28, 0x6a, 0xbd, 0xe5, 0xf0, 0x39, 0x43, 0xd5, 0x77, 0x70, 0x20, 0x25, 0x96, 0x26 };
                yield return (plainBytes, cryptBytes, (aes, outStream, inStream) => Encrypt(aes, Keys[1], AesKeySize.Aes192, PaddingMode.PKCS7, outStream, inStream));
                yield return (cryptBytes, plainBytes, (aes, outStream, inStream) => Decrypt(aes, Keys[1], AesKeySize.Aes192, PaddingMode.PKCS7, outStream, inStream));

                cryptBytes = new byte[] { 0xdd, 0xa9, 0x7c, 0xa4, 0x86, 0x4c, 0xdf, 0xe0, 0x6e, 0xaf, 0x70, 0xa0, 0xec, 0x0d, 0x71, 0x91,
                    0x16, 0x27, 0x11, 0x57, 0xdb, 0x26, 0xb4, 0xc8, 0x5f, 0x85, 0x74, 0xde, 0x3b, 0x3f, 0xe2, 0x0d };
                yield return (plainBytes, cryptBytes, (aes, outStream, inStream) => Encrypt(aes, Keys[1], AesKeySize.Aes192, PaddingMode.ANSIX923, outStream, inStream));
                yield return (cryptBytes, plainBytes, (aes, outStream, inStream) => Decrypt(aes, Keys[1], AesKeySize.Aes192, PaddingMode.ANSIX923, outStream, inStream));

                cryptBytes = new byte[] { 0xdd, 0xa9, 0x7c, 0xa4, 0x86, 0x4c, 0xdf, 0xe0, 0x6e, 0xaf, 0x70, 0xa0, 0xec, 0x0d, 0x71, 0x91,
                    0x0d, 0x63, 0xb2, 0xb2, 0xc2, 0x76, 0xde, 0x93, 0x06, 0xb2, 0xf3, 0x7e, 0x36, 0xda, 0xbe, 0x49 };
                yield return (plainBytes, cryptBytes, (aes, outStream, inStream) => Encrypt(aes, Keys[1], AesKeySize.Aes192, PaddingMode.Zeros, outStream, inStream));
                yield return (cryptBytes, plainBytes, (aes, outStream, inStream) => Decrypt(aes, Keys[1], AesKeySize.Aes192, PaddingMode.Zeros, outStream, inStream));

                cryptBytes = new byte[] { 0xdd, 0xa9, 0x7c, 0xa4, 0x86, 0x4c, 0xdf, 0xe0, 0x6e, 0xaf, 0x70, 0xa0, 0xec, 0x0d, 0x71, 0x91,
                    0xa0, 0xd6, 0x1d, 0x4e, 0xda, 0x77, 0xaf, 0x48, 0xd2, 0x6a, 0xb8, 0xb4, 0x7f, 0xfa, 0x02, 0x91 };
                yield return (plainBytes, cryptBytes, (aes, outStream, inStream) => Encrypt(aes, Keys[1], AesKeySize.Aes192, PaddingMode.ISO10126, outStream, inStream));
                yield return (cryptBytes, plainBytes, (aes, outStream, inStream) => Decrypt(aes, Keys[1], AesKeySize.Aes192, PaddingMode.ISO10126, outStream, inStream));

                plainBytes = new byte[] { 0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff };
                cryptBytes = new byte[] { 0x8e, 0xa2, 0xb7, 0xca, 0x51, 0x67, 0x45, 0xbf, 0xea, 0xfc, 0x49, 0x90, 0x4b, 0x49, 0x60, 0x89,
                    0x9f, 0x3b, 0x75, 0x04, 0x92, 0x6f, 0x8b, 0xd3, 0x6e, 0x31, 0x18, 0xe9, 0x03, 0xa4, 0xcd, 0x4a };
                yield return (plainBytes, cryptBytes, (aes, outStream, inStream) => Encrypt(aes, Keys[2], AesKeySize.Aes256, PaddingMode.PKCS7, outStream, inStream));
                yield return (cryptBytes, plainBytes, (aes, outStream, inStream) => Decrypt(aes, Keys[2], AesKeySize.Aes256, PaddingMode.PKCS7, outStream, inStream));

                cryptBytes = new byte[] { 0x8e, 0xa2, 0xb7, 0xca, 0x51, 0x67, 0x45, 0xbf, 0xea, 0xfc, 0x49, 0x90, 0x4b, 0x49, 0x60, 0x89,
                    0x2b, 0x34, 0x7c, 0x88, 0xe5, 0xc9, 0xc8, 0xff, 0x0b, 0x7a, 0x12, 0x1b, 0x68, 0x7b, 0xd0, 0x6d };
                yield return (plainBytes, cryptBytes, (aes, outStream, inStream) => Encrypt(aes, Keys[2], AesKeySize.Aes256, PaddingMode.ANSIX923, outStream, inStream));
                yield return (cryptBytes, plainBytes, (aes, outStream, inStream) => Decrypt(aes, Keys[2], AesKeySize.Aes256, PaddingMode.ANSIX923, outStream, inStream));

                cryptBytes = new byte[] { 0x8e, 0xa2, 0xb7, 0xca, 0x51, 0x67, 0x45, 0xbf, 0xea, 0xfc, 0x49, 0x90, 0x4b, 0x49, 0x60, 0x89,
                    0xe6, 0x20, 0xf5, 0x2f, 0xe7, 0x5b, 0xbe, 0x87, 0xab, 0x75, 0x8c, 0x06, 0x24, 0x94, 0x3d, 0x8b };
                yield return (plainBytes, cryptBytes, (aes, outStream, inStream) => Encrypt(aes, Keys[2], AesKeySize.Aes256, PaddingMode.Zeros, outStream, inStream));
                yield return (cryptBytes, plainBytes, (aes, outStream, inStream) => Decrypt(aes, Keys[2], AesKeySize.Aes256, PaddingMode.Zeros, outStream, inStream));

                cryptBytes = new byte[] { 0x8e, 0xa2, 0xb7, 0xca, 0x51, 0x67, 0x45, 0xbf, 0xea, 0xfc, 0x49, 0x90, 0x4b, 0x49, 0x60, 0x89,
                    0xdf, 0xe8, 0xf7, 0x7a, 0x27, 0xaa, 0xdd, 0x15, 0x79, 0xdf, 0xed, 0x4f, 0xa9, 0x86, 0xe5, 0xfe };
                yield return (plainBytes, cryptBytes, (aes, outStream, inStream) => Encrypt(aes, Keys[2], AesKeySize.Aes256, PaddingMode.ISO10126, outStream, inStream));
                yield return (cryptBytes, plainBytes, (aes, outStream, inStream) => Decrypt(aes, Keys[2], AesKeySize.Aes256, PaddingMode.ISO10126, outStream, inStream));
            }
        }

        private static byte[][] KeysGcm = new byte[6][]
        {
            new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
            new byte[] { 0xfe, 0xff, 0xe9, 0x92, 0x86, 0x65, 0x73, 0x1c, 0x6d, 0x6a, 0x8f, 0x94, 0x67, 0x30, 0x83, 0x08 },
            new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
            new byte[] { 0xfe, 0xff, 0xe9, 0x92, 0x86, 0x65, 0x73, 0x1c, 0x6d, 0x6a, 0x8f, 0x94, 0x67, 0x30, 0x83, 0x08, 0xfe, 0xff, 0xe9, 0x92, 0x86, 0x65, 0x73, 0x1c },
            new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
            new byte[] { 0xfe, 0xff, 0xe9, 0x92, 0x86, 0x65, 0x73, 0x1c, 0x6d, 0x6a, 0x8f, 0x94, 0x67, 0x30, 0x83, 0x08, 0xfe, 0xff, 0xe9, 0x92, 0x86, 0x65, 0x73, 0x1c, 0x6d, 0x6a, 0x8f, 0x94, 0x67, 0x30, 0x83, 0x08 }
        };

        private static byte[][] IVGcm = new byte[4][]
        {
            new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
            new byte[] { 0xca, 0xfe, 0xba, 0xbe, 0xfa, 0xce, 0xdb, 0xad, 0xde, 0xca, 0xf8, 0x88 },
            new byte[] { 0xca, 0xfe, 0xba, 0xbe, 0xfa, 0xce, 0xdb, 0xad },
            new byte[] { 0x93, 0x13, 0x22, 0x5d, 0xf8, 0x84, 0x06, 0xe5, 0x55, 0x90, 0x9c, 0x5a, 0xff, 0x52, 0x69, 0xaa,
                         0x6a, 0x7a, 0x95, 0x38, 0x53, 0x4f, 0x7d, 0xa1, 0xe4, 0xc3, 0x03, 0xd2, 0xa3, 0x18, 0xa7, 0x28,
                         0xc3, 0xc0, 0xc9, 0x51, 0x56, 0x80, 0x95, 0x39, 0xfc, 0xf0, 0xe2, 0x42, 0x9a, 0x6b, 0x52, 0x54,
                         0x16, 0xae, 0xdb, 0xf5, 0xa0, 0xde, 0x6a, 0x57, 0xa6, 0x37, 0xb3, 0x9b }
        };

        public static byte[][] AadGcm = new byte[2][]
        {
            new byte[] { },
            new byte[] { 0xfe, 0xed, 0xfa, 0xce, 0xde, 0xad, 0xbe, 0xef, 0xfe, 0xed, 0xfa, 0xce, 0xde, 0xad, 0xbe, 0xef, 0xab, 0xad, 0xda, 0xd2 }
        };

        public static string[] Tags = new string[18]
        {
            "58e2fccefa7e3061367f1d57a4e7455a",
            "ab6e47d42cec13bdf53a67b21257bddf",
            "4d5c2af327cd64a62cf35abd2ba6fab4",
            "5bc94fbc3221a5db94fae95ae7121a47",
            "3612d2e79e3b0785561be14aaca2fccb",
            "619cc5aefffe0bfa462af43c1699d050",
            "cd33b28ac773f74ba00ed1f312572435",
            "2ff58d80033927ab8ef4d4587514f0fb",
            "9924a7c8587336bfb118024db8674a14",
            "2519498e80f1478f37ba55bd6d27618c",
            "65dcc57fcf623a24094fcca40d3533f8",
            "dcf566ff291c25bbb8568fc3d376a6d9",
            "530f8afbc74536b9a963b4f1c4cb738b",
            "d0d1c8a799996bf0265b98b5d48ab919",
            "b094dac5d93471bdec1a502270e3cc6c",
            "76fc6ece0f4e1768cddf8853bb2d551b",
            "3a337dbf46a792c45e454913fe2ea8f2",
            "a44a8266ee1c8eb0c8b5d4cf5ae9f19a"
        };

        public static IEnumerable<(byte[] In, byte[] Out, string ExpectedTag, Func<Aes.AF.AesManager, Stream, Stream, string> Crypt)> EncryptDecryptGCM
        {
            get
            {
                byte[] plainBytes = new byte[] { };
                byte[] cryptBytes = new byte[] { };
                yield return (plainBytes, cryptBytes, Tags[0], (aes, outStream, inStream) => EncryptGCM(aes, KeysGcm[0], IVGcm[0], AadGcm[0], AesKeySize.Aes128, outStream, inStream));
                yield return (cryptBytes, plainBytes, Tags[0], (aes, outStream, inStream) => DecryptGCM(aes, KeysGcm[0], IVGcm[0], AadGcm[0], Tags[0], AesKeySize.Aes128, outStream, inStream));

                plainBytes = new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
                cryptBytes = new byte[] { 0x03, 0x88, 0xda, 0xce, 0x60, 0xb6, 0xa3, 0x92, 0xf3, 0x28, 0xc2, 0xb9, 0x71, 0xb2, 0xfe, 0x78 };
                yield return (plainBytes, cryptBytes, Tags[1], (aes, outStream, inStream) => EncryptGCM(aes, KeysGcm[0], IVGcm[0], AadGcm[0], AesKeySize.Aes128, outStream, inStream));
                yield return (cryptBytes, plainBytes, Tags[1], (aes, outStream, inStream) => DecryptGCM(aes, KeysGcm[0], IVGcm[0], AadGcm[0], Tags[1], AesKeySize.Aes128, outStream, inStream));

                plainBytes = new byte[] { 0xd9, 0x31, 0x32, 0x25, 0xf8, 0x84, 0x06, 0xe5, 0xa5, 0x59, 0x09, 0xc5, 0xaf, 0xf5, 0x26, 0x9a,
                                          0x86, 0xa7, 0xa9, 0x53, 0x15, 0x34, 0xf7, 0xda, 0x2e, 0x4c, 0x30, 0x3d, 0x8a, 0x31, 0x8a, 0x72,
                                          0x1c, 0x3c, 0x0c, 0x95, 0x95, 0x68, 0x09, 0x53, 0x2f, 0xcf, 0x0e, 0x24, 0x49, 0xa6, 0xb5, 0x25,
                                          0xb1, 0x6a, 0xed, 0xf5, 0xaa, 0x0d, 0xe6, 0x57, 0xba, 0x63, 0x7b, 0x39, 0x1a, 0xaf, 0xd2, 0x55 };
                cryptBytes = new byte[] { 0x42, 0x83, 0x1e, 0xc2, 0x21, 0x77, 0x74, 0x24, 0x4b, 0x72, 0x21, 0xb7, 0x84, 0xd0, 0xd4, 0x9c,
                                          0xe3, 0xaa, 0x21, 0x2f, 0x2c, 0x02, 0xa4, 0xe0, 0x35, 0xc1, 0x7e, 0x23, 0x29, 0xac, 0xa1, 0x2e,
                                          0x21, 0xd5, 0x14, 0xb2, 0x54, 0x66, 0x93, 0x1c, 0x7d, 0x8f, 0x6a, 0x5a, 0xac, 0x84, 0xaa, 0x05,
                                          0x1b, 0xa3, 0x0b, 0x39, 0x6a, 0x0a, 0xac, 0x97, 0x3d, 0x58, 0xe0, 0x91, 0x47, 0x3f, 0x59, 0x85 };
                yield return (plainBytes, cryptBytes, Tags[2], (aes, outStream, inStream) => EncryptGCM(aes, KeysGcm[1], IVGcm[1], AadGcm[0], AesKeySize.Aes128, outStream, inStream));
                yield return (cryptBytes, plainBytes, Tags[2], (aes, outStream, inStream) => DecryptGCM(aes, KeysGcm[1], IVGcm[1], AadGcm[0], Tags[2], AesKeySize.Aes128, outStream, inStream));

                plainBytes = new byte[] { 0xd9, 0x31, 0x32, 0x25, 0xf8, 0x84, 0x06, 0xe5, 0xa5, 0x59, 0x09, 0xc5, 0xaf, 0xf5, 0x26, 0x9a,
                                          0x86, 0xa7, 0xa9, 0x53, 0x15, 0x34, 0xf7, 0xda, 0x2e, 0x4c, 0x30, 0x3d, 0x8a, 0x31, 0x8a, 0x72,
                                          0x1c, 0x3c, 0x0c, 0x95, 0x95, 0x68, 0x09, 0x53, 0x2f, 0xcf, 0x0e, 0x24, 0x49, 0xa6, 0xb5, 0x25,
                                          0xb1, 0x6a, 0xed, 0xf5, 0xaa, 0x0d, 0xe6, 0x57, 0xba, 0x63, 0x7b, 0x39 };
                cryptBytes = new byte[] { 0x42, 0x83, 0x1e, 0xc2, 0x21, 0x77, 0x74, 0x24, 0x4b, 0x72, 0x21, 0xb7, 0x84, 0xd0, 0xd4, 0x9c,
                                          0xe3, 0xaa, 0x21, 0x2f, 0x2c, 0x02, 0xa4, 0xe0, 0x35, 0xc1, 0x7e, 0x23, 0x29, 0xac, 0xa1, 0x2e,
                                          0x21, 0xd5, 0x14, 0xb2, 0x54, 0x66, 0x93, 0x1c, 0x7d, 0x8f, 0x6a, 0x5a, 0xac, 0x84, 0xaa, 0x05,
                                          0x1b, 0xa3, 0x0b, 0x39, 0x6a, 0x0a, 0xac, 0x97, 0x3d, 0x58, 0xe0, 0x91 };
                yield return (plainBytes, cryptBytes, Tags[3], (aes, outStream, inStream) => EncryptGCM(aes, KeysGcm[1], IVGcm[1], AadGcm[1], AesKeySize.Aes128, outStream, inStream));
                yield return (cryptBytes, plainBytes, Tags[3], (aes, outStream, inStream) => DecryptGCM(aes, KeysGcm[1], IVGcm[1], AadGcm[1], Tags[3], AesKeySize.Aes128, outStream, inStream));

                cryptBytes = new byte[] { 0x61, 0x35, 0x3b, 0x4c, 0x28, 0x06, 0x93, 0x4a, 0x77, 0x7f, 0xf5, 0x1f, 0xa2, 0x2a, 0x47, 0x55,
                                          0x69, 0x9b, 0x2a, 0x71, 0x4f, 0xcd, 0xc6, 0xf8, 0x37, 0x66, 0xe5, 0xf9, 0x7b, 0x6c, 0x74, 0x23,
                                          0x73, 0x80, 0x69, 0x00, 0xe4, 0x9f, 0x24, 0xb2, 0x2b, 0x09, 0x75, 0x44, 0xd4, 0x89, 0x6b, 0x42,
                                          0x49, 0x89, 0xb5, 0xe1, 0xeb, 0xac, 0x0f, 0x07, 0xc2, 0x3f, 0x45, 0x98 };
                yield return (plainBytes, cryptBytes, Tags[4], (aes, outStream, inStream) => EncryptGCM(aes, KeysGcm[1], IVGcm[2], AadGcm[1], AesKeySize.Aes128, outStream, inStream));
                yield return (cryptBytes, plainBytes, Tags[4], (aes, outStream, inStream) => DecryptGCM(aes, KeysGcm[1], IVGcm[2], AadGcm[1], Tags[4], AesKeySize.Aes128, outStream, inStream));

                cryptBytes = new byte[] { 0x8c, 0xe2, 0x49, 0x98, 0x62, 0x56, 0x15, 0xb6, 0x03, 0xa0, 0x33, 0xac, 0xa1, 0x3f, 0xb8, 0x94,
                                          0xbe, 0x91, 0x12, 0xa5, 0xc3, 0xa2, 0x11, 0xa8, 0xba, 0x26, 0x2a, 0x3c, 0xca, 0x7e, 0x2c, 0xa7,
                                          0x01, 0xe4, 0xa9, 0xa4, 0xfb, 0xa4, 0x3c, 0x90, 0xcc, 0xdc, 0xb2, 0x81, 0xd4, 0x8c, 0x7c, 0x6f,
                                          0xd6, 0x28, 0x75, 0xd2, 0xac, 0xa4, 0x17, 0x03, 0x4c, 0x34, 0xae, 0xe5 };
                yield return (plainBytes, cryptBytes, Tags[5], (aes, outStream, inStream) => EncryptGCM(aes, KeysGcm[1], IVGcm[3], AadGcm[1], AesKeySize.Aes128, outStream, inStream));
                yield return (cryptBytes, plainBytes, Tags[5], (aes, outStream, inStream) => DecryptGCM(aes, KeysGcm[1], IVGcm[3], AadGcm[1], Tags[5], AesKeySize.Aes128, outStream, inStream));

                //----------------------------- 192 --------------------------------------------------------------

                plainBytes = new byte[] { };
                cryptBytes = new byte[] { };
                yield return (plainBytes, cryptBytes, Tags[6], (aes, outStream, inStream) => EncryptGCM(aes, KeysGcm[2], IVGcm[0], AadGcm[0], AesKeySize.Aes192, outStream, inStream));
                yield return (cryptBytes, plainBytes, Tags[6], (aes, outStream, inStream) => DecryptGCM(aes, KeysGcm[2], IVGcm[0], AadGcm[0], Tags[6], AesKeySize.Aes192, outStream, inStream));

                plainBytes = new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
                cryptBytes = new byte[] { 0x98, 0xe7, 0x24, 0x7c, 0x07, 0xf0, 0xfe, 0x41, 0x1c, 0x26, 0x7e, 0x43, 0x84, 0xb0, 0xf6, 0x00 };
                yield return (plainBytes, cryptBytes, Tags[7], (aes, outStream, inStream) => EncryptGCM(aes, KeysGcm[2], IVGcm[0], AadGcm[0], AesKeySize.Aes192, outStream, inStream));
                yield return (cryptBytes, plainBytes, Tags[7], (aes, outStream, inStream) => DecryptGCM(aes, KeysGcm[2], IVGcm[0], AadGcm[0], Tags[7], AesKeySize.Aes192, outStream, inStream));

                plainBytes = new byte[] { 0xd9, 0x31, 0x32, 0x25, 0xf8, 0x84, 0x06, 0xe5, 0xa5, 0x59, 0x09, 0xc5, 0xaf, 0xf5, 0x26, 0x9a,
                                          0x86, 0xa7, 0xa9, 0x53, 0x15, 0x34, 0xf7, 0xda, 0x2e, 0x4c, 0x30, 0x3d, 0x8a, 0x31, 0x8a, 0x72,
                                          0x1c, 0x3c, 0x0c, 0x95, 0x95, 0x68, 0x09, 0x53, 0x2f, 0xcf, 0x0e, 0x24, 0x49, 0xa6, 0xb5, 0x25,
                                          0xb1, 0x6a, 0xed, 0xf5, 0xaa, 0x0d, 0xe6, 0x57, 0xba, 0x63, 0x7b, 0x39, 0x1a, 0xaf, 0xd2, 0x55 };
                cryptBytes = new byte[] { 0x39, 0x80, 0xca, 0x0b, 0x3c, 0x00, 0xe8, 0x41, 0xeb, 0x06, 0xfa, 0xc4, 0x87, 0x2a, 0x27, 0x57,
                                          0x85, 0x9e, 0x1c, 0xea, 0xa6, 0xef, 0xd9, 0x84, 0x62, 0x85, 0x93, 0xb4, 0x0c, 0xa1, 0xe1, 0x9c,
                                          0x7d, 0x77, 0x3d, 0x00, 0xc1, 0x44, 0xc5, 0x25, 0xac, 0x61, 0x9d, 0x18, 0xc8, 0x4a, 0x3f, 0x47,
                                          0x18, 0xe2, 0x44, 0x8b, 0x2f, 0xe3, 0x24, 0xd9, 0xcc, 0xda, 0x27, 0x10, 0xac, 0xad, 0xe2, 0x56 };
                yield return (plainBytes, cryptBytes, Tags[8], (aes, outStream, inStream) => EncryptGCM(aes, KeysGcm[3], IVGcm[1], AadGcm[0], AesKeySize.Aes192, outStream, inStream));
                yield return (cryptBytes, plainBytes, Tags[8], (aes, outStream, inStream) => DecryptGCM(aes, KeysGcm[3], IVGcm[1], AadGcm[0], Tags[8], AesKeySize.Aes192, outStream, inStream));

                plainBytes = new byte[] { 0xd9, 0x31, 0x32, 0x25, 0xf8, 0x84, 0x06, 0xe5, 0xa5, 0x59, 0x09, 0xc5, 0xaf, 0xf5, 0x26, 0x9a,
                                          0x86, 0xa7, 0xa9, 0x53, 0x15, 0x34, 0xf7, 0xda, 0x2e, 0x4c, 0x30, 0x3d, 0x8a, 0x31, 0x8a, 0x72,
                                          0x1c, 0x3c, 0x0c, 0x95, 0x95, 0x68, 0x09, 0x53, 0x2f, 0xcf, 0x0e, 0x24, 0x49, 0xa6, 0xb5, 0x25,
                                          0xb1, 0x6a, 0xed, 0xf5, 0xaa, 0x0d, 0xe6, 0x57, 0xba, 0x63, 0x7b, 0x39 };
                cryptBytes = new byte[] { 0x39, 0x80, 0xca, 0x0b, 0x3c, 0x00, 0xe8, 0x41, 0xeb, 0x06, 0xfa, 0xc4, 0x87, 0x2a, 0x27, 0x57,
                                          0x85, 0x9e, 0x1c, 0xea, 0xa6, 0xef, 0xd9, 0x84, 0x62, 0x85, 0x93, 0xb4, 0x0c, 0xa1, 0xe1, 0x9c,
                                          0x7d, 0x77, 0x3d, 0x00, 0xc1, 0x44, 0xc5, 0x25, 0xac, 0x61, 0x9d, 0x18, 0xc8, 0x4a, 0x3f, 0x47,
                                          0x18, 0xe2, 0x44, 0x8b, 0x2f, 0xe3, 0x24, 0xd9, 0xcc, 0xda, 0x27, 0x10 };
                yield return (plainBytes, cryptBytes, Tags[9], (aes, outStream, inStream) => EncryptGCM(aes, KeysGcm[3], IVGcm[1], AadGcm[1], AesKeySize.Aes192, outStream, inStream));
                yield return (cryptBytes, plainBytes, Tags[9], (aes, outStream, inStream) => DecryptGCM(aes, KeysGcm[3], IVGcm[1], AadGcm[1], Tags[9], AesKeySize.Aes192, outStream, inStream));

                cryptBytes = new byte[] { 0x0f, 0x10, 0xf5, 0x99, 0xae, 0x14, 0xa1, 0x54, 0xed, 0x24, 0xb3, 0x6e, 0x25, 0x32, 0x4d, 0xb8,
                                          0xc5, 0x66, 0x63, 0x2e, 0xf2, 0xbb, 0xb3, 0x4f, 0x83, 0x47, 0x28, 0x0f, 0xc4, 0x50, 0x70, 0x57,
                                          0xfd, 0xdc, 0x29, 0xdf, 0x9a, 0x47, 0x1f, 0x75, 0xc6, 0x65, 0x41, 0xd4, 0xd4, 0xda, 0xd1, 0xc9,
                                          0xe9, 0x3a, 0x19, 0xa5, 0x8e, 0x8b, 0x47, 0x3f, 0xa0, 0xf0, 0x62, 0xf7 };
                yield return (plainBytes, cryptBytes, Tags[10], (aes, outStream, inStream) => EncryptGCM(aes, KeysGcm[3], IVGcm[2], AadGcm[1], AesKeySize.Aes192, outStream, inStream));
                yield return (cryptBytes, plainBytes, Tags[10], (aes, outStream, inStream) => DecryptGCM(aes, KeysGcm[3], IVGcm[2], AadGcm[1], Tags[10], AesKeySize.Aes192, outStream, inStream));

                cryptBytes = new byte[] { 0xd2, 0x7e, 0x88, 0x68, 0x1c, 0xe3, 0x24, 0x3c, 0x48, 0x30, 0x16, 0x5a, 0x8f, 0xdc, 0xf9, 0xff,
                                          0x1d, 0xe9, 0xa1, 0xd8, 0xe6, 0xb4, 0x47, 0xef, 0x6e, 0xf7, 0xb7, 0x98, 0x28, 0x66, 0x6e, 0x45,
                                          0x81, 0xe7, 0x90, 0x12, 0xaf, 0x34, 0xdd, 0xd9, 0xe2, 0xf0, 0x37, 0x58, 0x9b, 0x29, 0x2d, 0xb3,
                                          0xe6, 0x7c, 0x03, 0x67, 0x45, 0xfa, 0x22, 0xe7, 0xe9, 0xb7, 0x37, 0x3b };
                yield return (plainBytes, cryptBytes, Tags[11], (aes, outStream, inStream) => EncryptGCM(aes, KeysGcm[3], IVGcm[3], AadGcm[1], AesKeySize.Aes192, outStream, inStream));
                yield return (cryptBytes, plainBytes, Tags[11], (aes, outStream, inStream) => DecryptGCM(aes, KeysGcm[3], IVGcm[3], AadGcm[1], Tags[11], AesKeySize.Aes192, outStream, inStream));

                //----------------------------- 256 --------------------------------------------------------------

                plainBytes = new byte[] { };
                cryptBytes = new byte[] { };
                yield return (plainBytes, cryptBytes, Tags[12], (aes, outStream, inStream) => EncryptGCM(aes, KeysGcm[4], IVGcm[0], AadGcm[0], AesKeySize.Aes256, outStream, inStream));
                yield return (cryptBytes, plainBytes, Tags[12], (aes, outStream, inStream) => DecryptGCM(aes, KeysGcm[4], IVGcm[0], AadGcm[0], Tags[12], AesKeySize.Aes256, outStream, inStream));

                plainBytes = new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
                cryptBytes = new byte[] { 0xce, 0xa7, 0x40, 0x3d, 0x4d, 0x60, 0x6b, 0x6e, 0x07, 0x4e, 0xc5, 0xd3, 0xba, 0xf3, 0x9d, 0x18 };
                yield return (plainBytes, cryptBytes, Tags[13], (aes, outStream, inStream) => EncryptGCM(aes, KeysGcm[4], IVGcm[0], AadGcm[0], AesKeySize.Aes256, outStream, inStream));
                yield return (cryptBytes, plainBytes, Tags[13], (aes, outStream, inStream) => DecryptGCM(aes, KeysGcm[4], IVGcm[0], AadGcm[0], Tags[13], AesKeySize.Aes256, outStream, inStream));

                plainBytes = new byte[] { 0xd9, 0x31, 0x32, 0x25, 0xf8, 0x84, 0x06, 0xe5, 0xa5, 0x59, 0x09, 0xc5, 0xaf, 0xf5, 0x26, 0x9a,
                                          0x86, 0xa7, 0xa9, 0x53, 0x15, 0x34, 0xf7, 0xda, 0x2e, 0x4c, 0x30, 0x3d, 0x8a, 0x31, 0x8a, 0x72,
                                          0x1c, 0x3c, 0x0c, 0x95, 0x95, 0x68, 0x09, 0x53, 0x2f, 0xcf, 0x0e, 0x24, 0x49, 0xa6, 0xb5, 0x25,
                                          0xb1, 0x6a, 0xed, 0xf5, 0xaa, 0x0d, 0xe6, 0x57, 0xba, 0x63, 0x7b, 0x39, 0x1a, 0xaf, 0xd2, 0x55 };
                cryptBytes = new byte[] { 0x52, 0x2d, 0xc1, 0xf0, 0x99, 0x56, 0x7d, 0x07, 0xf4, 0x7f, 0x37, 0xa3, 0x2a, 0x84, 0x42, 0x7d,
                                          0x64, 0x3a, 0x8c, 0xdc, 0xbf, 0xe5, 0xc0, 0xc9, 0x75, 0x98, 0xa2, 0xbd, 0x25, 0x55, 0xd1, 0xaa,
                                          0x8c, 0xb0, 0x8e, 0x48, 0x59, 0x0d, 0xbb, 0x3d, 0xa7, 0xb0, 0x8b, 0x10, 0x56, 0x82, 0x88, 0x38,
                                          0xc5, 0xf6, 0x1e, 0x63, 0x93, 0xba, 0x7a, 0x0a, 0xbc, 0xc9, 0xf6, 0x62, 0x89, 0x80, 0x15, 0xad };
                yield return (plainBytes, cryptBytes, Tags[14], (aes, outStream, inStream) => EncryptGCM(aes, KeysGcm[5], IVGcm[1], AadGcm[0], AesKeySize.Aes256, outStream, inStream));
                yield return (cryptBytes, plainBytes, Tags[14], (aes, outStream, inStream) => DecryptGCM(aes, KeysGcm[5], IVGcm[1], AadGcm[0], Tags[14], AesKeySize.Aes256, outStream, inStream));

                plainBytes = new byte[] { 0xd9, 0x31, 0x32, 0x25, 0xf8, 0x84, 0x06, 0xe5, 0xa5, 0x59, 0x09, 0xc5, 0xaf, 0xf5, 0x26, 0x9a,
                                          0x86, 0xa7, 0xa9, 0x53, 0x15, 0x34, 0xf7, 0xda, 0x2e, 0x4c, 0x30, 0x3d, 0x8a, 0x31, 0x8a, 0x72,
                                          0x1c, 0x3c, 0x0c, 0x95, 0x95, 0x68, 0x09, 0x53, 0x2f, 0xcf, 0x0e, 0x24, 0x49, 0xa6, 0xb5, 0x25,
                                          0xb1, 0x6a, 0xed, 0xf5, 0xaa, 0x0d, 0xe6, 0x57, 0xba, 0x63, 0x7b, 0x39 };
                cryptBytes = new byte[] { 0x52, 0x2d, 0xc1, 0xf0, 0x99, 0x56, 0x7d, 0x07, 0xf4, 0x7f, 0x37, 0xa3, 0x2a, 0x84, 0x42, 0x7d,
                                          0x64, 0x3a, 0x8c, 0xdc, 0xbf, 0xe5, 0xc0, 0xc9, 0x75, 0x98, 0xa2, 0xbd, 0x25, 0x55, 0xd1, 0xaa,
                                          0x8c, 0xb0, 0x8e, 0x48, 0x59, 0x0d, 0xbb, 0x3d, 0xa7, 0xb0, 0x8b, 0x10, 0x56, 0x82, 0x88, 0x38,
                                          0xc5, 0xf6, 0x1e, 0x63, 0x93, 0xba, 0x7a, 0x0a, 0xbc, 0xc9, 0xf6, 0x62 };
                yield return (plainBytes, cryptBytes, Tags[15], (aes, outStream, inStream) => EncryptGCM(aes, KeysGcm[5], IVGcm[1], AadGcm[1], AesKeySize.Aes256, outStream, inStream));
                yield return (cryptBytes, plainBytes, Tags[15], (aes, outStream, inStream) => DecryptGCM(aes, KeysGcm[5], IVGcm[1], AadGcm[1], Tags[15], AesKeySize.Aes256, outStream, inStream));

                cryptBytes = new byte[] { 0xc3, 0x76, 0x2d, 0xf1, 0xca, 0x78, 0x7d, 0x32, 0xae, 0x47, 0xc1, 0x3b, 0xf1, 0x98, 0x44, 0xcb,
                                          0xaf, 0x1a, 0xe1, 0x4d, 0x0b, 0x97, 0x6a, 0xfa, 0xc5, 0x2f, 0xf7, 0xd7, 0x9b, 0xba, 0x9d, 0xe0,
                                          0xfe, 0xb5, 0x82, 0xd3, 0x39, 0x34, 0xa4, 0xf0, 0x95, 0x4c, 0xc2, 0x36, 0x3b, 0xc7, 0x3f, 0x78,
                                          0x62, 0xac, 0x43, 0x0e, 0x64, 0xab, 0xe4, 0x99, 0xf4, 0x7c, 0x9b, 0x1f };
                yield return (plainBytes, cryptBytes, Tags[16], (aes, outStream, inStream) => EncryptGCM(aes, KeysGcm[5], IVGcm[2], AadGcm[1], AesKeySize.Aes256, outStream, inStream));
                yield return (cryptBytes, plainBytes, Tags[16], (aes, outStream, inStream) => DecryptGCM(aes, KeysGcm[5], IVGcm[2], AadGcm[1], Tags[16], AesKeySize.Aes256, outStream, inStream));

                cryptBytes = new byte[] { 0x5a, 0x8d, 0xef, 0x2f, 0x0c, 0x9e, 0x53, 0xf1, 0xf7, 0x5d, 0x78, 0x53, 0x65, 0x9e, 0x2a, 0x20,
                                          0xee, 0xb2, 0xb2, 0x2a, 0xaf, 0xde, 0x64, 0x19, 0xa0, 0x58, 0xab, 0x4f, 0x6f, 0x74, 0x6b, 0xf4,
                                          0x0f, 0xc0, 0xc3, 0xb7, 0x80, 0xf2, 0x44, 0x45, 0x2d, 0xa3, 0xeb, 0xf1, 0xc5, 0xd8, 0x2c, 0xde,
                                          0xa2, 0x41, 0x89, 0x97, 0x20, 0x0e, 0xf8, 0x2e, 0x44, 0xae, 0x7e, 0x3f };
                yield return (plainBytes, cryptBytes, Tags[17], (aes, outStream, inStream) => EncryptGCM(aes, KeysGcm[5], IVGcm[3], AadGcm[1], AesKeySize.Aes256, outStream, inStream));
                yield return (cryptBytes, plainBytes, Tags[17], (aes, outStream, inStream) => DecryptGCM(aes, KeysGcm[5], IVGcm[3], AadGcm[1], Tags[17], AesKeySize.Aes256, outStream, inStream));
            }
        }

        #region private Encrypt/Decrypt methods

        private static void Encrypt(AF.AesManager aesManager, byte[] key, AesKeySize keySize, PaddingMode paddingMode, Stream outStream, Stream inStream)
        {
            using (var encryptStream = new CryptoStream(outStream, aesManager.CreateEcbEncryptor(key, keySize, paddingMode), CryptoStreamMode.Write, true))
            {
                encryptStream.WriteFrom(inStream);
            }
        }

        private static void Decrypt(AF.AesManager aesManager, byte[] key, AesKeySize keySize, PaddingMode paddingMode, Stream outStream, Stream inStream)
        {
            using (var encryptStream = new CryptoStream(inStream, aesManager.CreateEcbDecryptor(key, keySize, paddingMode), CryptoStreamMode.Read, true))
            {
                encryptStream.ReadInto(outStream);
            }
        }

        private static string EncryptGCM(AF.AesManager aesManager, byte[] key, byte[] IV, byte[] aad, AesKeySize keySize, Stream outStream, Stream inStream)
        {
            IAuthenticatedCryptoTransform authenticatedTransform;
            using (authenticatedTransform = aesManager.CreateGcmEncryptor(key, IV, aad, keySize))
            using (var encryptStream = new CryptoStream(outStream, authenticatedTransform, CryptoStreamMode.Write, true))
            {
                encryptStream.WriteFrom(inStream);
            }
            return authenticatedTransform.Tag;
        }

        /// <summary>
        /// If decryption fails it will throw an exception
        /// The returned Tag is not the tag generated during decryption, it is the one passed to the factorymethod
        /// It is returned because the encryption/decryption tests are the same method signatures
        /// </summary>
        /// <param name="aesManager"></param>
        /// <param name="key"></param>
        /// <param name="IV"></param>
        /// <param name="aad"></param>
        /// <param name="tag"></param>
        /// <param name="keySize"></param>
        /// <param name="outStream"></param>
        /// <param name="inStream"></param>
        /// <returns></returns>
        private static string DecryptGCM(AF.AesManager aesManager, byte[] key, byte[] IV, byte[] aad, string tag, AesKeySize keySize, Stream outStream, Stream inStream)
        {
            IAuthenticatedCryptoTransform authenticatedTransform;
            using (authenticatedTransform = aesManager.CreateGcmDecryptor(key, IV, aad, tag, keySize))
            using (var encryptStream = new CryptoStream(inStream, authenticatedTransform, CryptoStreamMode.Read, true))
            {
                encryptStream.ReadInto(outStream);
            }
            return authenticatedTransform.Tag;
        }

        #endregion

        #endregion

        #region RoundKeyExpand

        private readonly static byte[][] ExpectedRoundKeys128 = new byte[11][]
        {
            new byte[] { 0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c },
            new byte[] { 0xa0, 0xfa, 0xfe, 0x17, 0x88, 0x54, 0x2c, 0xb1, 0x23, 0xa3, 0x39, 0x39, 0x2a, 0x6c, 0x76, 0x05 },
            new byte[] { 0xf2, 0xc2, 0x95, 0xf2, 0x7a, 0x96, 0xb9, 0x43, 0x59, 0x35, 0x80, 0x7a, 0x73, 0x59, 0xf6, 0x7f },
            new byte[] { 0x3d, 0x80, 0x47, 0x7d, 0x47, 0x16, 0xfe, 0x3e, 0x1e, 0x23, 0x7e, 0x44, 0x6d, 0x7a, 0x88, 0x3b },
            new byte[] { 0xef, 0x44, 0xa5, 0x41, 0xa8, 0x52, 0x5b, 0x7f, 0xb6, 0x71, 0x25, 0x3b, 0xdb, 0x0b, 0xad, 0x00 },
            new byte[] { 0xd4, 0xd1, 0xc6, 0xf8, 0x7c, 0x83, 0x9d, 0x87, 0xca, 0xf2, 0xb8, 0xbc, 0x11, 0xf9, 0x15, 0xbc },
            new byte[] { 0x6d, 0x88, 0xa3, 0x7a, 0x11, 0x0b, 0x3e, 0xfd, 0xdb, 0xf9, 0x86, 0x41, 0xca, 0x00, 0x93, 0xfd },
            new byte[] { 0x4e, 0x54, 0xf7, 0x0e, 0x5f, 0x5f, 0xc9, 0xf3, 0x84, 0xa6, 0x4f, 0xb2, 0x4e, 0xa6, 0xdc, 0x4f },
            new byte[] { 0xea, 0xd2, 0x73, 0x21, 0xb5, 0x8d, 0xba, 0xd2, 0x31, 0x2b, 0xf5, 0x60, 0x7f, 0x8d, 0x29, 0x2f },
            new byte[] { 0xac, 0x77, 0x66, 0xf3, 0x19, 0xfa, 0xdc, 0x21, 0x28, 0xd1, 0x29, 0x41, 0x57, 0x5c, 0x00, 0x6e },
            new byte[] { 0xd0, 0x14, 0xf9, 0xa8, 0xc9, 0xee, 0x25, 0x89, 0xe1, 0x3f, 0x0c, 0xc8, 0xb6, 0x63, 0x0c, 0xa6 }
        };

        private readonly static byte[][] ExpectedRoundKeys192 = new byte[13][]
        {
            new byte[] { 0x8e, 0x73, 0xb0, 0xf7, 0xda, 0x0e, 0x64, 0x52, 0xc8, 0x10, 0xf3, 0x2b, 0x80, 0x90, 0x79, 0xe5 },
            new byte[] { 0x62, 0xf8, 0xea, 0xd2, 0x52, 0x2c, 0x6b, 0x7b, 0xfe, 0x0c, 0x91, 0xf7, 0x24, 0x02, 0xf5, 0xa5 },
            new byte[] { 0xec, 0x12, 0x06, 0x8e, 0x6c, 0x82, 0x7f, 0x6b, 0x0e, 0x7a, 0x95, 0xb9, 0x5c, 0x56, 0xfe, 0xc2 },
            new byte[] { 0x4d, 0xb7, 0xb4, 0xbd, 0x69, 0xb5, 0x41, 0x18, 0x85, 0xa7, 0x47, 0x96, 0xe9, 0x25, 0x38, 0xfd },
            new byte[] { 0xe7, 0x5f, 0xad, 0x44, 0xbb, 0x09, 0x53, 0x86, 0x48, 0x5a, 0xf0, 0x57, 0x21, 0xef, 0xb1, 0x4f },
            new byte[] { 0xa4, 0x48, 0xf6, 0xd9, 0x4d, 0x6d, 0xce, 0x24, 0xaa, 0x32, 0x63, 0x60, 0x11, 0x3b, 0x30, 0xe6 },
            new byte[] { 0xa2, 0x5e, 0x7e, 0xd5, 0x83, 0xb1, 0xcf, 0x9a, 0x27, 0xf9, 0x39, 0x43, 0x6a, 0x94, 0xf7, 0x67 },
            new byte[] { 0xc0, 0xa6, 0x94, 0x07, 0xd1, 0x9d, 0xa4, 0xe1, 0xec, 0x17, 0x86, 0xeb, 0x6f, 0xa6, 0x49, 0x71 },
            new byte[] { 0x48, 0x5f, 0x70, 0x32, 0x22, 0xcb, 0x87, 0x55, 0xe2, 0x6d, 0x13, 0x52, 0x33, 0xf0, 0xb7, 0xb3 },
            new byte[] { 0x40, 0xbe, 0xeb, 0x28, 0x2f, 0x18, 0xa2, 0x59, 0x67, 0x47, 0xd2, 0x6b, 0x45, 0x8c, 0x55, 0x3e },
            new byte[] { 0xa7, 0xe1, 0x46, 0x6c, 0x94, 0x11, 0xf1, 0xdf, 0x82, 0x1f, 0x75, 0x0a, 0xad, 0x07, 0xd7, 0x53 },
            new byte[] { 0xca, 0x40, 0x05, 0x38, 0x8f, 0xcc, 0x50, 0x06, 0x28, 0x2d, 0x16, 0x6a, 0xbc, 0x3c, 0xe7, 0xb5 },
            new byte[] { 0xe9, 0x8b, 0xa0, 0x6f, 0x44, 0x8c, 0x77, 0x3c, 0x8e, 0xcc, 0x72, 0x04, 0x01, 0x00, 0x22, 0x02 }
        };

        private readonly static byte[][] ExpectedRoundKeys256 = new byte[15][]
        {
            new byte[] { 0x60, 0x3d, 0xeb, 0x10, 0x15, 0xca, 0x71, 0xbe, 0x2b, 0x73, 0xae, 0xf0, 0x85, 0x7d, 0x77, 0x81 },
            new byte[] { 0x1f, 0x35, 0x2c, 0x07, 0x3b, 0x61, 0x08, 0xd7, 0x2d, 0x98, 0x10, 0xa3, 0x09, 0x14, 0xdf, 0xf4 },
            new byte[] { 0x9b, 0xa3, 0x54, 0x11, 0x8e, 0x69, 0x25, 0xaf, 0xa5, 0x1a, 0x8b, 0x5f, 0x20, 0x67, 0xfc, 0xde },
            new byte[] { 0xa8, 0xb0, 0x9c, 0x1a, 0x93, 0xd1, 0x94, 0xcd, 0xbe, 0x49, 0x84, 0x6e, 0xb7, 0x5d, 0x5b, 0x9a },
            new byte[] { 0xd5, 0x9a, 0xec, 0xb8, 0x5b, 0xf3, 0xc9, 0x17, 0xfe, 0xe9, 0x42, 0x48, 0xde, 0x8e, 0xbe, 0x96 },
            new byte[] { 0xb5, 0xa9, 0x32, 0x8a, 0x26, 0x78, 0xa6, 0x47, 0x98, 0x31, 0x22, 0x29, 0x2f, 0x6c, 0x79, 0xb3 },
            new byte[] { 0x81, 0x2c, 0x81, 0xad, 0xda, 0xdf, 0x48, 0xba, 0x24, 0x36, 0x0a, 0xf2, 0xfa, 0xb8, 0xb4, 0x64 },
            new byte[] { 0x98, 0xc5, 0xbf, 0xc9, 0xbe, 0xbd, 0x19, 0x8e, 0x26, 0x8c, 0x3b, 0xa7, 0x09, 0xe0, 0x42, 0x14 },
            new byte[] { 0x68, 0x00, 0x7b, 0xac, 0xb2, 0xdf, 0x33, 0x16, 0x96, 0xe9, 0x39, 0xe4, 0x6c, 0x51, 0x8d, 0x80 },
            new byte[] { 0xc8, 0x14, 0xe2, 0x04, 0x76, 0xa9, 0xfb, 0x8a, 0x50, 0x25, 0xc0, 0x2d, 0x59, 0xc5, 0x82, 0x39 },
            new byte[] { 0xde, 0x13, 0x69, 0x67, 0x6c, 0xcc, 0x5a, 0x71, 0xfa, 0x25, 0x63, 0x95, 0x96, 0x74, 0xee, 0x15 },
            new byte[] { 0x58, 0x86, 0xca, 0x5d, 0x2e, 0x2f, 0x31, 0xd7, 0x7e, 0x0a, 0xf1, 0xfa, 0x27, 0xcf, 0x73, 0xc3 },
            new byte[] { 0x74, 0x9c, 0x47, 0xab, 0x18, 0x50, 0x1d, 0xda, 0xe2, 0x75, 0x7e, 0x4f, 0x74, 0x01, 0x90, 0x5a },
            new byte[] { 0xca, 0xfa, 0xaa, 0xe3, 0xe4, 0xd5, 0x9b, 0x34, 0x9a, 0xdf, 0x6a, 0xce, 0xbd, 0x10, 0x19, 0x0d },
            new byte[] { 0xfe, 0x48, 0x90, 0xd1, 0xe6, 0x18, 0x8d, 0x0b, 0x04, 0x6d, 0xf3, 0x44, 0x70, 0x6c, 0x63, 0x1e }
        };

        public static IEnumerable<(byte[] Key, AesKeySize KeySize, byte[][] ExpectedRoundKeys)> RoundKeyExpand
        {
            get
            {
                byte[] key = new byte[] { 0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c };
                yield return (key, AesKeySize.Aes128, ExpectedRoundKeys128);

                key = new byte[] { 0x8e, 0x73, 0xb0, 0xf7, 0xda, 0x0e, 0x64, 0x52, 0xc8, 0x10, 0xf3, 0x2b, 0x80, 0x90, 0x79, 0xe5, 0x62, 0xf8, 0xea, 0xd2, 0x52, 0x2c, 0x6b, 0x7b };
                yield return (key, AesKeySize.Aes192, ExpectedRoundKeys192);

                key = new byte[] { 0x60, 0x3d, 0xeb, 0x10, 0x15, 0xca, 0x71, 0xbe, 0x2b, 0x73, 0xae, 0xf0, 0x85, 0x7d, 0x77, 0x81, 0x1f, 0x35, 0x2c, 0x07, 0x3b, 0x61, 0x08, 0xd7, 0x2d, 0x98, 0x10, 0xa3, 0x09, 0x14, 0xdf, 0xf4 };
                yield return (key, AesKeySize.Aes256, ExpectedRoundKeys256);
            }
        }

        #endregion
    }
}
